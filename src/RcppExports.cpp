// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// init_w_r
NumericMatrix init_w_r(int num_genes, int num_studies, const NumericMatrix& r);
RcppExport SEXP _BiGER_init_w_r(SEXP num_genesSEXP, SEXP num_studiesSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_genes(num_genesSEXP);
    Rcpp::traits::input_parameter< int >::type num_studies(num_studiesSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(init_w_r(num_genes, num_studies, r));
    return rcpp_result_gen;
END_RCPP
}
// cpp_BiGER
List cpp_BiGER(const NumericMatrix& r, const NumericVector& n_r, const NumericVector& n_u, NumericMatrix& W, const NumericVector& mu, const NumericVector& sigma2, const double alpha, const double beta, const bool save_chains, const bool save_burnin, const int iter, const int burnin, const int verbose);
RcppExport SEXP _BiGER_cpp_BiGER(SEXP rSEXP, SEXP n_rSEXP, SEXP n_uSEXP, SEXP WSEXP, SEXP muSEXP, SEXP sigma2SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP save_chainsSEXP, SEXP save_burninSEXP, SEXP iterSEXP, SEXP burninSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n_r(n_rSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n_u(n_uSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type save_chains(save_chainsSEXP);
    Rcpp::traits::input_parameter< const bool >::type save_burnin(save_burninSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_BiGER(r, n_r, n_u, W, mu, sigma2, alpha, beta, save_chains, save_burnin, iter, burnin, verbose));
    return rcpp_result_gen;
END_RCPP
}
// cpp_bBiGER
List cpp_bBiGER(const NumericMatrix& r, const NumericVector& n_r, const NumericVector& n_u, const NumericVector& mu, const NumericVector& sigma2, const double alpha, const double beta, const bool save_chains, const bool save_burnin, const int iter, const int burnin, const int verbose);
RcppExport SEXP _BiGER_cpp_bBiGER(SEXP rSEXP, SEXP n_rSEXP, SEXP n_uSEXP, SEXP muSEXP, SEXP sigma2SEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP save_chainsSEXP, SEXP save_burninSEXP, SEXP iterSEXP, SEXP burninSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n_r(n_rSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n_u(n_uSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type save_chains(save_chainsSEXP);
    Rcpp::traits::input_parameter< const bool >::type save_burnin(save_burninSEXP);
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_bBiGER(r, n_r, n_u, mu, sigma2, alpha, beta, save_chains, save_burnin, iter, burnin, verbose));
    return rcpp_result_gen;
END_RCPP
}
// cpp_vBiGER
List cpp_vBiGER(const NumericMatrix& r, const NumericVector& n_r, const NumericVector& n_u, const NumericVector& mu, const NumericVector& sigma2_inv, double alpha, double beta, int max_iter, double delta, int verbose);
RcppExport SEXP _BiGER_cpp_vBiGER(SEXP rSEXP, SEXP n_rSEXP, SEXP n_uSEXP, SEXP muSEXP, SEXP sigma2_invSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP max_iterSEXP, SEXP deltaSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n_r(n_rSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n_u(n_uSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sigma2_inv(sigma2_invSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_vBiGER(r, n_r, n_u, mu, sigma2_inv, alpha, beta, max_iter, delta, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BiGER_init_w_r", (DL_FUNC) &_BiGER_init_w_r, 3},
    {"_BiGER_cpp_BiGER", (DL_FUNC) &_BiGER_cpp_BiGER, 13},
    {"_BiGER_cpp_bBiGER", (DL_FUNC) &_BiGER_cpp_bBiGER, 12},
    {"_BiGER_cpp_vBiGER", (DL_FUNC) &_BiGER_cpp_vBiGER, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_BiGER(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
